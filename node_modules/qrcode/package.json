{
  "name": "qrcode",
  "description": "QRCode / 2d Barcode api with both server side and client side support using canvas",
  "version": "0.2.4",
  "author": {
    "name": "Ryan Day",
    "email": "soldair@gmail.com"
  },
  "keywords": [
    "canvas",
    "qrcode",
    "barcode"
  ],
  "main": "./qrcode.js",
  "homepage": "http://github.com/soldair/node-qrcode",
  "scripts": {
    "pretest": "node build.js",
    "prepublish": "node build.js",
    "test": "tap test/url.js"
  },
  "bin": {
    "qrcode": "./bin/qrcode"
  },
  "dependencies": {
    "canvas": ">= 0.4.3",
    "colors": "*"
  },
  "devDependencies": {
    "express": "2.5.x",
    "browserify": "1.9.x",
    "uglify-js": "1.2.x",
    "canvasutil": "*",
    "tap": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/soldair/node-qrcode.git"
  },
  "engines": {
    "node": ">=0.2.3"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/soldair/node-qrcode.png)](http://travis-ci.org/soldair/node-qrcode)\n\n\nnode-qrcode\n===========\n\n\nThis is a server side QR code / 2d barcode generator.\nit is an extension of \"QRCode for JavaScript\" which Kazuhiko Arase thankfully mit licensed\n\nthe qrcode-draw.js can be used  directly as a client side lib if its appended too or included with lib/qrcode.js\nto use this on the server side please require('qrcode'); =)\n\nexamples\n--------\nsimple test\n\n```js\n\n\tvar QRCode = require('qrcode');\n\n\tQRCode.toDataURL('i am a pony!',function(err,url){\n\t\tconsole.log(url);\n\t});\n\n```\nin your terminal if you install globally\n\n```sh\n\n\tqrcode \"hi i want a qrcode\"\n\n  qrcode \"i like to save qrs to file\" qr.png\n\n\n```\n\nin client side html. \n\n```html\n\n<!--[if ie]><script type=\"text/javascript\" src=\"/vendors/excanvas/excanvas.js\"></script><![endif]-->\n<script src=\"/build/qrcode.js\"></script>\n<canvas id=\"test\"></canvas>\n<script>\n\n  var qrcodedraw = new qrcodelib.qrcodedraw();\n\n  qrcodedraw.draw(document.getElementByID('test'),\"this text will be in the code!\",function(error,canvas){\n    if(error) {\n      return console.log('Error =( ',error);\n    }\n    console.log('success!');\n  });\n</script>\n\n```\n\nremeber to put excanvas and qrcode.js somewhere where your browser can find them\n\nserver side api\n---------------\n\n  QRCode.draw(text, [optional options], cb(error,canvas));\n    returns node canvas object see https://github.com/LearnBoost/node-canvas for all of the cool node things you can do\n    look up the canvas api for the other cool things\n\n  QRCode.toDataURL(text, [optional options], cb(error,dataURL));\n    returns mime image/png data url for the 2d barcode \n\n  QRCode.save(path, text, [optional options] , cb(error,written));\n    saves png to the path specified returns bytes written\n\n  QRCode.drawText(text, [optional options],cb)\n    returns an ascii representation of the qrcode using unicode characters and ansi control codes for background control.\n\n  QRCode.drawBitArray(text, [optional options], cb(error,bits,width));\n    returns an array with each value being either 0 light or 1 dark and the width of each row.\n    this is enough info to render a qrcode any way you want =)\n\noptions\n---------\n\n  errorCorrectLevel\n    can be one of the values in qrcode.errorCorrectLevel\n    can be a string. one of  \"minumum\",\"medium\",\"high\",\"max\"\n    if undefined defaults to H which is max error correction\n    if invalid value defaults to minimum error correction\n\nclient side api\n---------------\n\nwindow.qrcodelib\n  - qrcodelib.qrcodedraw() Constructor\n\nqrcode = new qrcodelib.qrcodedraw()\n  - qrcode.draw(canvasElement,text,[optional options],cb);\n\n\nfor quick client side use:\n\n- run node test/clientsideserver.js\n- open localhost:3031 in your browser\n\nthe javascript is in test/clientside.html\n\nqr code capacity.\n-----------------\n\nthis libary can encode a string up to lengths:\n2953 in error correct level L\n2331 in error correct level M\n1663 in error correct level Q\n1273 in error correct level H\n\nthe default is H. \nIt can now be changed in an ugly way that wont be supported for more then another few days if you really need to.\nalso the default module size at qr version 40 is really too small for the camera on my Nexus 1 and to make it larger i run out of screen to show it. At 40 the barcode scanner even finds random UPC 1d barcodes in the mass of little squares.\nthe default module size cannot be changed through the public api at this time.\n\ninstall\n-------\n\n\tnpm install qrcode\n\n\tto use qrcode from the command line to save  qrcode images or generate ones you can view in your termial\n\n\tnpm install -g qrcode \n\n\n  node-canvas is a native module and requires dev packages of cairo and pixman to compile. \n  on ubuntu you can install them with apt-get and npm install will work great.\n\n  ```sh\n  \n  sudo apt-get install libpixman-1-dev libcairo2-dev\n  ```\n  \n  it is my higest priority for this module to use an all js png encoder and remove this dep.\n\n\ndependencies\n------------\nthese should be taken care of for you by npm but you should\n\n\tnpm install canvas\n\nif cairo gives you trouble and you cannot install canvas checkout the canvas site i know tj has setup a way to download and install a version of cairo/pixman for testing.\n\nThe word \"QR Code\" is registered trademark of \nDENSO WAVE INCORPORATED\n",
  "readmeFilename": "README.md",
  "_id": "qrcode@0.2.4",
  "_from": "qrcode@*"
}
